<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Servlet笔记</title>
      <link href="/archives/bc07bc32.html"/>
      <url>/archives/bc07bc32.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet笔记"><a href="#Servlet笔记" class="headerlink" title="Servlet笔记"></a>Servlet笔记</h1><h2 id="理论部分"><a href="#理论部分" class="headerlink" title="理论部分"></a>理论部分</h2><h3 id="Servlet在系统中扮演的角色"><a href="#Servlet在系统中扮演的角色" class="headerlink" title="Servlet在系统中扮演的角色"></a>Servlet在系统中扮演的角色</h3><p>角色名称：控制器</p><p>具体功能：总体的调度控制</p><ul><li>接收请求</li><li>根据业务逻辑处理请求（调用Service方法）</li><li>分发页面（转发、重定向）</li><li>返回响应</li></ul><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><table><thead><tr><th align="center">生命周期环节</th><th align="center">调用的方法</th><th align="center">时机</th><th align="center">次数</th></tr></thead><tbody><tr><td align="center">创建对象</td><td align="center">无参构造器</td><td align="center"><code>默认：第一次请求</code> <br/><code>修改：Web应用启动时 </code></td><td align="center">一次</td></tr><tr><td align="center">初始化</td><td align="center">init(ServletConfig servletConfig)</td><td align="center">创建对象后</td><td align="center">一次</td></tr><tr><td align="center">处理请求</td><td align="center">service(ServletRequest servletRequest<br/>ServletResponse servletResponse)</td><td align="center">接收到请求后</td><td align="center">多次</td></tr><tr><td align="center">清理操作</td><td align="center">destroy()</td><td align="center">Web应用卸载之前</td><td align="center">一次</td></tr></tbody></table><h3 id="Servlet容器"><a href="#Servlet容器" class="headerlink" title="Servlet容器"></a>Servlet容器</h3><ul><li>容器对象的功能：负责容器内对象的创建、初始化、工作、异常管理、清理、销毁等等各个方面。</li><li>容器对象的数量：通常是单例的。</li></ul><h3 id="HttpServlet和Servlet继承关系"><a href="#HttpServlet和Servlet继承关系" class="headerlink" title="HttpServlet和Servlet继承关系"></a>HttpServlet和Servlet继承关系</h3><p><img src="https://a.ideaopen.cn/lc2949188/VBC5BQPh.png" alt="插入图片"></p><h2 id="操作部分"><a href="#操作部分" class="headerlink" title="操作部分"></a>操作部分</h2><h3 id="创建Servlet"><a href="#创建Servlet" class="headerlink" title="创建Servlet"></a>创建Servlet</h3><h4 id="创建Servlet类"><a href="#创建Servlet类" class="headerlink" title="创建Servlet类"></a>创建Servlet类</h4><ul><li>方式一：实现Servlet接口</li><li>方式二：<code>继承HttpServlet</code></li></ul><h4 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置Servlet本身 --&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;!-- 全类名太长，给Servlet设置一个简短名称 --&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- 配置Servlet的全类名 --&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.atguigu.servlet.HelloServlet&lt;/servlet-class&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- 配置初始化参数 --&gt;</span><br><span class="line">       &lt;init-param&gt;</span><br><span class="line">           &lt;param-name&gt;goodMan&lt;/param-name&gt;</span><br><span class="line">           &lt;param-value&gt;me&lt;/param-value&gt;</span><br><span class="line">       &lt;/init-param&gt;</span><br><span class="line"></span><br><span class="line">       &lt;!-- 配置Servlet启动顺序 --&gt;</span><br><span class="line">       &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;</span><br><span class="line">   &lt;/servlet&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 将Servlet和访问地址关联起来 --&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;HelloServlet&lt;/servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;/helloServlet&lt;/url-pattern&gt;</span><br><span class="line">   &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="辅助Servlet工作的对象"><a href="#辅助Servlet工作的对象" class="headerlink" title="辅助Servlet工作的对象"></a>辅助Servlet工作的对象</h3><h4 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h4><p>主要功能：获取ServletContext对象</p><p>次要功能：获取Servlet初始化参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public interface ServletConfig &#123;</span><br><span class="line">    String getServletName();</span><br><span class="line"></span><br><span class="line">    ServletContext getServletContext();</span><br><span class="line"></span><br><span class="line">    String getInitParameter(String var1);</span><br><span class="line"></span><br><span class="line">    Enumeration&lt;String&gt; getInitParameterNames();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h4><p>代表：整个Web应用。ServletContext对象的生命周期和整个Web应用的生命周期一致。</p><p>是否单例：是</p><p>典型的功能：</p><ul><li>获取某个资源的真实路径：getRealPath()</li><li>获取整个Web应用级别的初始化参数：getInitParameter()</li><li>作为Web应用范围的域对象<br>存入数据：setAttribute()<br>取出数据：getAttribute()</li></ul><h5 id="配置Web应用级别的初始化参数"><a href="#配置Web应用级别的初始化参数" class="headerlink" title="配置Web应用级别的初始化参数"></a>配置Web应用级别的初始化参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 配置Web应用的初始化参数 --&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">      &lt;param-name&gt;handsomeMan&lt;/param-name&gt;</span><br><span class="line">      &lt;param-value&gt;alsoMe&lt;/param-value&gt;</span><br><span class="line">  &lt;/context-param&gt;</span><br></pre></td></tr></table></figure><p>Web应用级别的初始化参数的作用举例：</p><ul><li>在整个项目级别，设置一些全局范围内的参数</li><li>使用Spring框架时，配置Spring配置文件所在的位置</li></ul><h5 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String handsomeMan = servletContext.getInitParameter(&quot;handsomeMan&quot;);</span><br><span class="line">System.out.println(&quot;handsomeMan = &quot; + handsomeMan);</span><br></pre></td></tr></table></figure><h3 id="使用IDEA创建Servlet"><a href="#使用IDEA创建Servlet" class="headerlink" title="使用IDEA创建Servlet"></a>使用IDEA创建Servlet</h3><p><img src="https://a.ideaopen.cn/lc2949188/M366J1eK.png" alt="插入图片"><br><img src="https://a.ideaopen.cn/lc2949188/wrtAiZIO.png" alt="插入图片"></p><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p><img src="https://a.ideaopen.cn/lc2949188/I42iLFFw.png" alt="插入图片"></p><h3 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h3><h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h4><table><thead><tr><th align="center">请求参数情况</th><th align="center">调用方法</th></tr></thead><tbody><tr><td align="center">一个名字一个值</td><td align="center">request.getParameter(“请求参数名”</td></tr><tr><td align="center">一个名字多个值</td><td align="center">request.getParameterValues(“请求参数名”)</td></tr></tbody></table><h4 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(&quot;转发的目标资源地址&quot;).forward(request, response);</span><br></pre></td></tr></table></figure><p>这个地址是服务器解析的，所以开头的斜杠代表Web应用根目录</p><h4 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h4><ul><li>GET请求：在Tomcat的server.xml中配置URIEncoding&#x3D;”UTF-8”</li><li>POST请求：在获取请求参数前调用request.setCharacterEncoding(“UTF-8”)</li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="返回字符串形式的响应数据"><a href="#返回字符串形式的响应数据" class="headerlink" title="返回字符串形式的响应数据"></a>返回字符串形式的响应数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PrintWriter writer = response.getWriter();</span><br><span class="line"></span><br><span class="line">writer.write(&quot;&lt;!DOCTYPE html&gt;                  &quot;);</span><br><span class="line">writer.write(&quot;&lt;html&gt;                           &quot;);</span><br><span class="line">writer.write(&quot;&lt;head&gt;                           &quot;);</span><br><span class="line">writer.write(&quot;&lt;!-- 设置浏览器端的解码字符集 --&gt;&quot;);</span><br><span class="line">writer.write(&quot;    &lt;meta charset=&#x27;UTF-8&#x27;&gt;       &quot;);</span><br><span class="line">writer.write(&quot;    &lt;title&gt;Title&lt;/title&gt;         &quot;);</span><br><span class="line">writer.write(&quot;&lt;/head&gt;                          &quot;);</span><br><span class="line">writer.write(&quot;&lt;body&gt;                           &quot;);</span><br><span class="line">writer.write(&quot;&lt;p&gt;志玲姐姐你好！&lt;/p&gt;            &quot;);</span><br><span class="line">writer.write(&quot;&lt;/body&gt;                          &quot;);</span><br><span class="line">writer.write(&quot;&lt;/html&gt;                          &quot;);</span><br></pre></td></tr></table></figure><h4 id="请求重定向"><a href="#请求重定向" class="headerlink" title="请求重定向"></a>请求重定向</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(&quot;重定向的目标资源的地址&quot;)</span><br></pre></td></tr></table></figure><h4 id="设置字符集-1"><a href="#设置字符集-1" class="headerlink" title="设置字符集"></a>设置字符集</h4><ul><li><p>设置方式一：response.setCharacterEncoding(“UTF-8”);<br>含义：设置服务器端对响应体数据的编码字符集，所以还需要设置浏览器的解码字符集</p></li><li><p>设置方式二：response.setContentType(“text&#x2F;html;charset&#x3D;UTF-8”);<br>含义：告诉浏览器本次响应体的内容类型，等于设置浏览器的解码字符集，那么服务器端自动使用这个字符集编码</p></li></ul><h3 id="转发和重定向"><a href="#转发和重定向" class="headerlink" title="转发和重定向"></a>转发和重定向</h3><table><thead><tr><th align="center">转发</th><th align="center">重定向</th></tr></thead><tbody><tr><td align="center"><strong>一次请求</strong></td><td align="center"><strong>两次请求</strong></td></tr><tr><td align="center">浏览器地址栏显示的是第一个资源的地址</td><td align="center">浏览器地址栏显示的是第二个资源的地址</td></tr><tr><td align="center">全程使用的是同一个request对象</td><td align="center">全程使用的是不同的request对象</td></tr><tr><td align="center">在服务器端完成</td><td align="center">在浏览器端完成</td></tr><tr><td align="center">目标资源地址由服务器解析</td><td align="center">目标资源地址由浏览器解析</td></tr><tr><td align="center">目标资源可以在WEB-INF目录下</td><td align="center">目标资源不能在WEB-INF目录下</td></tr><tr><td align="center">目标资源仅限于本应用内部</td><td align="center">目标资源可以是外部资源</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript基本语法</title>
      <link href="/archives/e6b78215.html"/>
      <url>/archives/e6b78215.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h1><h2 id="JavaScript代码嵌入方式"><a href="#JavaScript代码嵌入方式" class="headerlink" title="JavaScript代码嵌入方式"></a>JavaScript代码嵌入方式</h2><h3 id="HTML文档内"><a href="#HTML文档内" class="headerlink" title="HTML文档内"></a>HTML文档内</h3><ul><li>JavaScript代码要写在script标签内</li><li>script标签可以写在文档内的任意位置</li><li>为了能够方便查询或操作HTML标签（元素）script标签可以写在body标签后面</li><li>可以参考简化版的HelloWorld</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在HBuilderX中，script标签通过打字“sc”两个字母就可以直接完整生成 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 下面是同样实现HelloWorld功能的简化版代码</span><br><span class="line">document.getElementById(&quot;helloBtn&quot;).onclick = function() &#123;</span><br><span class="line">alert(&quot;Hello simple&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="引入外部JavaScript文档"><a href="#引入外部JavaScript文档" class="headerlink" title="引入外部JavaScript文档"></a>引入外部JavaScript文档</h3><p>在script标签内通过src属性指定外部xxx.js文件的路径即可。但是要注意以下两点：</p><ul><li>引用外部JavaScript文件的script标签里面不能写JavaScript代码</li><li>先引入，再使用</li><li>script标签不能写成单标签</li></ul><p><img src="https://a.ideaopen.cn/lc2949188/q3KQJVSg.png" alt="插入图片"></p><p>引入方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;!-- 使用script标签的src属性引用外部JavaScript文件，和Java中的import语句类似 --&gt;</span><br><span class="line">&lt;!-- 引用外部JavaScript文件的script标签里面不能写JavaScript代码 --&gt;</span><br><span class="line">&lt;!-- 引用外部JavaScript文件的script标签不能改成单标签 --&gt;</span><br><span class="line">&lt;!-- 外部JavaScript文件一定要先引入再使用 --&gt;</span><br><span class="line">&lt;script src=&quot;/pro02-JavaScript/scripts/outter.js&quot; type=&quot;text/javascript&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">// 调用外部JavaScript文件中声明的方法</span><br><span class="line">showMessage();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="声明和使用变量"><a href="#声明和使用变量" class="headerlink" title="声明和使用变量"></a>声明和使用变量</h2><h3 id="JavaScript数据类型"><a href="#JavaScript数据类型" class="headerlink" title="JavaScript数据类型"></a>JavaScript数据类型</h3><p> 基本数据类型</p><ul><li><p>数值型：JavaScript不区分整数、小数</p></li><li><p>字符串：JavaScript不区分字符、字符串；单引号、双引号意思一样。</p></li><li><p>布尔型：true、false</p></li></ul><p>在JavaScript中，其他类型和布尔类型的自动转换。</p><p>true：非零的数值，非空字符串，非空对象</p><p>false：零，空字符串，null，undefined</p><p>例如：”false”放在if判断中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// &quot;false&quot;是一个非空字符串，直接放在if判断中会被当作『真』处理</span><br><span class="line">if(&quot;false&quot;)&#123;</span><br><span class="line">alert(&quot;true&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">alert(&quot;false&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>关键字：var</p><p>数据类型：JavaScript变量可以接收任意类型的数据</p><p>标识符：严格区分大小写</p><p>变量使用规则</p><p>如果使用了一个没有声明的变量，那么会在运行时报错</p><p>Uncaught ReferenceError: b is not defined</p><p>如果声明一个变量没有初始化，那么这个变量的值就是undefined</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><p>内置函数：系统已经声明好了可以直接使用的函数。</p><h4 id="弹出警告框"><a href="#弹出警告框" class="headerlink" title="弹出警告框"></a>弹出警告框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&quot;警告框内容&quot;);</span><br></pre></td></tr></table></figure><h4 id="弹出确认框"><a href="#弹出确认框" class="headerlink" title="弹出确认框"></a>弹出确认框</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var result = confirm(&quot;老板，你真的不加个钟吗？&quot;);</span><br><span class="line">if(result) &#123;</span><br><span class="line">console.log(&quot;老板点了确定，表示要加钟&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">console.log(&quot;老板点了确定，表示不加钟&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在控制台打印日志"><a href="#在控制台打印日志" class="headerlink" title="在控制台打印日志"></a>在控制台打印日志</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;日志内容&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://a.ideaopen.cn/lc2949188/MbTsWP9b.png" alt="插入图片"></p><h3 id="声明函数"><a href="#声明函数" class="headerlink" title="声明函数"></a>声明函数</h3><p>写法1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ar total = function() &#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>写法2可以这样解读：声明一个函数，相当于创建了一个『函数对象』，将这个对象的『引用』赋值给变量total。最后加的分号不是给函数声明加的，而是给整体的赋值语句加的分号。</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>JavaScript中函数本身就是一种对象，函数名就是这个『对象』的『引用』。而调用函数的格式是：函数引用()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sum(a, b) &#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = sum(2, 3);</span><br><span class="line">console.log(&quot;result=&quot;+result);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var total = function() &#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var totalResult = total(3,6);</span><br><span class="line">console.log(&quot;totalResult=&quot;+totalResult);</span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="使用new关键字创建对象"><a href="#使用new关键字创建对象" class="headerlink" title="使用new关键字创建对象"></a>使用new关键字创建对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建对象</span><br><span class="line">var obj01 = new Object();</span><br><span class="line"></span><br><span class="line">// 给对象设置属性和属性值</span><br><span class="line">obj01.stuName = &quot;tom&quot;;</span><br><span class="line">obj01.stuAge = 20;</span><br><span class="line">obj01.stuSubject = &quot;java&quot;;</span><br><span class="line"></span><br><span class="line">// 在控制台输出对象</span><br><span class="line">console.log(obj01);</span><br></pre></td></tr></table></figure><h3 id="使用-创建对象"><a href="#使用-创建对象" class="headerlink" title="使用{}创建对象"></a>使用{}创建对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 创建对象</span><br><span class="line">var obj02 = &#123;</span><br><span class="line">&quot;soldierName&quot;:&quot;john&quot;,</span><br><span class="line">&quot;soldierAge&quot;:35,</span><br><span class="line">&quot;soldierWeapon&quot;:&quot;gun&quot;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 在控制台输出对象</span><br><span class="line">console.log(obj02);</span><br></pre></td></tr></table></figure><h3 id="给对象设置函数属性"><a href="#给对象设置函数属性" class="headerlink" title="给对象设置函数属性"></a>给对象设置函数属性</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 创建对象</span><br><span class="line">var obj01 = new Object();</span><br><span class="line"></span><br><span class="line">// 给对象设置属性和属性值</span><br><span class="line">obj01.stuName = &quot;tom&quot;;</span><br><span class="line">obj01.stuAge = 20;</span><br><span class="line">obj01.stuSubject = &quot;java&quot;;</span><br><span class="line"></span><br><span class="line">obj01.study = function() &#123;</span><br><span class="line">console.log(this.stuName + &quot; is studying&quot;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 在控制台输出对象</span><br><span class="line">console.log(obj01);</span><br><span class="line">// 调用函数</span><br><span class="line">obj01.study();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建对象</span><br><span class="line">var obj02 = &#123;</span><br><span class="line">&quot;soldierName&quot;:&quot;john&quot;,</span><br><span class="line">&quot;soldierAge&quot;:35,</span><br><span class="line">&quot;soldierWeapon&quot;:&quot;gun&quot;,</span><br><span class="line">&quot;soldierShoot&quot;:function()&#123;</span><br><span class="line">console.log(this.soldierName + &quot; is using &quot; + this.soldierWeapon);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 在控制台输出对象</span><br><span class="line">console.log(obj02);</span><br><span class="line">// 调用函数</span><br><span class="line">obj02.soldierShoot();</span><br></pre></td></tr></table></figure><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字只有两种情况：</p><ul><li>在函数外面：this关键字指向window对象（代表当前浏览器窗口）</li><li>在函数里面：this关键字指向调用函数的对象<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 直接打印this</span><br><span class="line">console.log(this);</span><br><span class="line"></span><br><span class="line">// 函数中的this</span><br><span class="line">// 1.声明函数</span><br><span class="line">function getName() &#123;</span><br><span class="line">console.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 2.创建对象</span><br><span class="line">var obj01 = &#123;</span><br><span class="line">&quot;name&quot;:&quot;tom&quot;,</span><br><span class="line">&quot;getName&quot;:getName</span><br><span class="line">&#125;;</span><br><span class="line">var obj02 = &#123;</span><br><span class="line">&quot;name&quot;:&quot;jerry&quot;,</span><br><span class="line">&quot;getName&quot;:getName</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 3.调用函数</span><br><span class="line">obj01.getName();</span><br><span class="line">obj02.getName();</span><br></pre></td></tr></table></figure></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="使用new关键字创建数组"><a href="#使用new关键字创建数组" class="headerlink" title="使用new关键字创建数组"></a>使用new关键字创建数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 1.创建数组对象</span><br><span class="line">var arr01 = new Array();</span><br><span class="line"></span><br><span class="line">// 2.压入数据</span><br><span class="line">arr01.push(&quot;apple&quot;);</span><br><span class="line">arr01.push(&quot;orange&quot;);</span><br><span class="line">arr01.push(&quot;banana&quot;);</span><br><span class="line">arr01.push(&quot;grape&quot;);</span><br><span class="line"></span><br><span class="line">// 3.遍历数组</span><br><span class="line">for (var i = 0; i &lt; arr01.length; i++) &#123;</span><br><span class="line">console.log(arr01[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 4.数组元素反序</span><br><span class="line">arr01.reverse();</span><br><span class="line">for (var i = 0; i &lt; arr01.length; i++) &#123;</span><br><span class="line">console.log(arr01[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 5.数组元素拼接成字符串</span><br><span class="line">var arrStr = arr01.join(&quot;,&quot;);</span><br><span class="line">console.log(arrStr);</span><br><span class="line"></span><br><span class="line">// 6.字符串拆分成数组</span><br><span class="line">var arr02 = arrStr.split(&quot;,&quot;);</span><br><span class="line">for (var i = 0; i &lt; arr02.length; i++) &#123;</span><br><span class="line">console.log(arr02[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 7.弹出数组中最后一个元素</span><br><span class="line">var ele = arr01.pop();</span><br><span class="line">console.log(ele);</span><br></pre></td></tr></table></figure><h3 id="使用-创建数组"><a href="#使用-创建数组" class="headerlink" title="使用[]创建数组"></a>使用[]创建数组</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 8.使用[]创建数组</span><br><span class="line">var arr03 = [&quot;cat&quot;,&quot;dog&quot;,&quot;tiger&quot;];</span><br><span class="line">console.log(arr03);</span><br></pre></td></tr></table></figure><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><h3 id="JSON格式的用途"><a href="#JSON格式的用途" class="headerlink" title="JSON格式的用途"></a>JSON格式的用途</h3><p>在开发中凡是涉及到『跨平台数据传输』，JSON格式一定是首选。</p><h3 id="JSON格式的说明"><a href="#JSON格式的说明" class="headerlink" title="JSON格式的说明"></a>JSON格式的说明</h3><p>JSON数据两端要么是{}，要么是[]</p><ul><li><p>{}定义JSON对象</p></li><li><p>[]定义JSON数组</p></li><li><p>JSON对象的格式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;key:value,key:value,...,key:value&#125;</span><br></pre></td></tr></table></figure></li><li><p>JOSN数组的格式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[value,value,...,value]</span><br></pre></td></tr></table></figure></li><li><p>key的类型固定是字符串</p></li><li><p>value的类型可以是：<br>基本数据类型<br>引用类型：JSON对象或JSON数组</p></li></ul><p>正因为JSON格式中value部分还可以继续使用JSON对象或JSON数组，所以JSON格式是可以『多层嵌套』的，所以JSON格式不论多么复杂的数据类型都可以表达。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;stuId&quot;:556,</span><br><span class="line">&quot;stuName&quot;:&quot;carl&quot;,</span><br><span class="line">&quot;school&quot;:&#123;</span><br><span class="line">&quot;schoolId&quot;:339,</span><br><span class="line">&quot;schoolName&quot;:&quot;atguigu&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;subjectList&quot;:[</span><br><span class="line">&#123;</span><br><span class="line">&quot;subjectName&quot;:&quot;java&quot;,</span><br><span class="line">&quot;subjectScore&quot;:50</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;subjectName&quot;:&quot;PHP&quot;,</span><br><span class="line">&quot;subjectScore&quot;:35</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;subjectName&quot;:&quot;python&quot;,</span><br><span class="line">&quot;subjectScore&quot;:24</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">&quot;teacherMap&quot;:&#123;</span><br><span class="line">&quot;aaa&quot;:&#123;</span><br><span class="line">&quot;teacherName&quot;:&quot;zhangsan&quot;,</span><br><span class="line">&quot;teacherAge&quot;:20</span><br><span class="line">&#125;,</span><br><span class="line">&quot;bbb&quot;:&#123;</span><br><span class="line">&quot;teacherName&quot;:&quot;zhangsanfeng&quot;,</span><br><span class="line">&quot;teacherAge&quot;:108</span><br><span class="line">&#125;,</span><br><span class="line">&quot;ccc&quot;:&#123;</span><br><span class="line">&quot;teacherName&quot;:&quot;zhangwuji&quot;,</span><br><span class="line">&quot;teacherAge&quot;:25</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JSON对象和JSON字符串互转"><a href="#JSON对象和JSON字符串互转" class="headerlink" title="JSON对象和JSON字符串互转"></a>JSON对象和JSON字符串互转</h3><h4 id="JSON对象转JSON字符串"><a href="#JSON对象转JSON字符串" class="headerlink" title="JSON对象转JSON字符串"></a>JSON对象转JSON字符串</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var jsonObj = &#123;&quot;stuName&quot;:&quot;tom&quot;,&quot;stuAge&quot;:20&#125;;</span><br><span class="line">var jsonStr = JSON.stringify(jsonObj);</span><br><span class="line"></span><br><span class="line">console.log(typeof jsonObj); // object</span><br><span class="line">console.log(typeof jsonStr); // string</span><br></pre></td></tr></table></figure><h4 id="JSON字符串转JSON对象"><a href="#JSON字符串转JSON对象" class="headerlink" title="JSON字符串转JSON对象"></a>JSON字符串转JSON对象</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jsonObj = JSON.parse(jsonStr);</span><br><span class="line">console.log(jsonObj); // &#123;stuName: &quot;tom&quot;, stuAge: 20&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO优化及站点被搜索引擎收录设置</title>
      <link href="/archives/c792f5ef.html"/>
      <url>/archives/c792f5ef.html</url>
      
        <content type="html"><![CDATA[<p>我们必须把我们的网站推送到搜索引擎那， 不然别人除了输入我们的域名或者搜索文章，是没法发现我们的博文。</p><h2 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h2><p>站点地图即sitemap，是一个页面，上面放置了网站上需要搜索引擎抓取的所有页面的链接。站点地图可以告诉搜索引擎网站上有哪些可供抓取的网页，以便搜索引擎可以更加智能地抓取网站。所以我们首先需要生成一个站点地图</p><p>安装百度和 Google 的站点地图生成插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h3 id="打开目录配置文件config-yml，在下面添加："><a href="#打开目录配置文件config-yml，在下面添加：" class="headerlink" title="打开目录配置文件config.yml，在下面添加："></a>打开目录配置文件config.yml，在下面添加：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h3 id="然后重新推送到服务器，在访问如下-URL"><a href="#然后重新推送到服务器，在访问如下-URL" class="headerlink" title="然后重新推送到服务器，在访问如下 URL:"></a>然后重新推送到服务器，在访问如下 URL:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure><p>如果有出现代码，就是成功啦</p><h3 id="我们通过百度站长平台提交网站，增加网站的索引量"><a href="#我们通过百度站长平台提交网站，增加网站的索引量" class="headerlink" title="我们通过百度站长平台提交网站，增加网站的索引量"></a>我们通过<a href="https://ziyuan.baidu.com/?castk=LTE=">百度站长平台</a>提交网站，增加网站的索引量</h3><p><img src="https://a.ideaopen.cn/lc2949188/6TjEAtYb.png" alt="插入图片"><br><img src="https://a.ideaopen.cn/lc2949188/1NuhsFZ3.png" alt="插入图片"><br>填完信息后需要验证网站，这里我选择的是html标签认证方式<br><img src="https://a.ideaopen.cn/lc2949188/iJk4b0Q3.png" alt="插入图片"></p><p>把content中的字符串复制到主题配置文件site_verification 中的baidu_site_verification就好。</p><p><img src="https://a.ideaopen.cn/lc2949188/Yu5r2aBb.png" alt="插入图片"></p><h3 id="通过安装插件实现主动推送"><a href="#通过安装插件实现主动推送" class="headerlink" title="通过安装插件实现主动推送"></a>通过安装插件实现主动推送</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-baidu-url-submit --save</span><br></pre></td></tr></table></figure><p>然后到站点目录配置文件config.yml中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 主动推送百度，被百度收录</span><br><span class="line">baidu_url_submit:</span><br><span class="line">  count: 10 # 提交最新的10个链接</span><br><span class="line">  host: # 百度站长平台中注册的域名</span><br><span class="line">  token: # 填入token</span><br><span class="line">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里，不用改</span><br></pre></td></tr></table></figure><p>host 填入你百度站长平台中注册的域名<br>token获取如下图<br><img src="https://a.ideaopen.cn/lc2949188/9TedCK9s.png" alt="插入图片"></p><p>查看config.yml文件中url的值，必须是百度站长平台注册的域名，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="line">url: https://pipperon.ltd</span><br></pre></td></tr></table></figure><p>最后在config.yml文件中，加入新的deployer:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- type: baidu_url_submitter</span><br></pre></td></tr></table></figure><p><img src="https://a.ideaopen.cn/lc2949188/kyEbrN9j.png" alt="插入图片"><br>切记代码一定要缩进一定要规范，否则可能会报错喔</p><h3 id="url持久化"><a href="#url持久化" class="headerlink" title="url持久化"></a>url持久化</h3><p>我们可以发现 hexo 默认生成的文章地址路径是 【网站名称／年／月／日／文章名称】。<br>这种链接对搜索爬虫是很不友好的，第一它的 url 结构超过了三层，太深了。<br>下面我推荐一种方式：安装 hexo-abbrlink</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>配置config.yml文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :title/</span><br><span class="line">permalink: archives/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>配置如图所示<br><img src="https://a.ideaopen.cn/lc2949188/LjkSDN6r.png" alt="插入图片"></p><p>之后部署一下，就看到你的链接变成了这样：<br><img src="https://a.ideaopen.cn/lc2949188/sp696AZ6.png" alt="插入图片"></p><h3 id="添加nofollow标签"><a href="#添加nofollow标签" class="headerlink" title="添加nofollow标签"></a>添加nofollow标签</h3><p>给非友情链接的出站链接添加「nofollow」标签，nofollow 标签是由谷歌领头创新的一个「反垃圾链接」的标签，并被百度、yahoo 等各大搜索引擎广泛支持，引用 nofollow 标签的目的是：用于指示搜索引擎不要追踪（即抓取）网页上的带有 nofollow 属性的任何出站链接，以减少垃圾链接的分散网站权重。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-nofollow --save</span><br></pre></td></tr></table></figure><p>打开config.yml文件添加配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nofollow:</span><br><span class="line">  enable: true</span><br><span class="line">  field: site</span><br><span class="line">  exclude: &#x27;&#x27;</span><br></pre></td></tr></table></figure><p>这样，你的链接将不会被加上nofollow属性啦</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/archives/b8f4bd70.html"/>
      <url>/archives/b8f4bd70.html</url>
      
        <content type="html"><![CDATA[<p>Hexo是一个快速、简洁且高效的博客框架，它能够将Markdown格式的文档渲染成漂亮的网页，这样我们就可以在很短的时间内迅速的创建出网站的静态内容，而Markdown格式对程序员来说相信并不陌生。要想使用Hexo来搭建自己的博客，我实在想不出有什么教程比官方文档更好，强烈建议大家阅读官方文档来了解Hexo，下面我只做一个简要的使用说明。</p><h2 id="使用Hexo搭建自己的博客"><a href="#使用Hexo搭建自己的博客" class="headerlink" title="使用Hexo搭建自己的博客"></a>使用Hexo搭建自己的博客</h2><h3 id="安装nodejs环境-用以下命令检测"><a href="#安装nodejs环境-用以下命令检测" class="headerlink" title="安装nodejs环境(用以下命令检测)"></a>安装nodejs环境(用以下命令检测)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ node --version</span><br><span class="line">$ npm --version</span><br></pre></td></tr></table></figure><p>More info: <a href="http://nodejs.cn/">nodejs下载链接</a></p><h3 id="安装git环境-用以下命令检测"><a href="#安装git环境-用以下命令检测" class="headerlink" title="安装git环境(用以下命令检测)"></a>安装git环境(用以下命令检测)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git --version</span><br></pre></td></tr></table></figure><p>More info: <a href="https://git-scm.com/downloads">git下载链接</a></p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure><h3 id="安装依赖项"><a href="#安装依赖项" class="headerlink" title="安装依赖项"></a>安装依赖项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="在本地生成博客"><a href="#在本地生成博客" class="headerlink" title="在本地生成博客"></a>在本地生成博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="http://localhost:4000/">点击测试链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
